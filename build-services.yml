parameters:
- name: repoToCheckout
  type: string
- name: checkoutPath
  type: string
- name: buildRelease
  type: boolean

stages:

- stage: Build_Common
  jobs:
  - job: Build_Common
    ${{ if parameters.buildRelease }}:
      strategy:
          maxParallel: 2
          matrix:
            debug:
              BuildConfiguration: debug
            release:
              BuildConfiguration: release
    ${{ else }}:
      variables:
        BuildConfiguration: 'debug'

    steps:
    - ${{ if ne(parameters.repoToCheckout, '') }}:
      - checkout: ${{ parameters.repoToCheckout }}
        path: ${{ parameters.checkoutPath }}

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: 'Service\GroupMembershipManagement'

    - task: DeleteFiles@1
      displayName: "Clean up development local settings files"
      inputs:
        SourceFolder: 'Service\GroupMembershipManagement'
        Contents: '**/local.settings.json'

    - task: DotNetCoreCLI@2
      displayName: dotnet build
      retryCountOnTaskFailure: 3
      inputs:
        command: build
        workingDirectory: 'Service\GroupMembershipManagement'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      retryCountOnTaskFailure: 3
      inputs:
        command: test
        workingDirectory: 'Service\GroupMembershipManagement'
        # see https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/Examples/MSBuild/MergeWith/HowTo.md for how to merge all the test output into one report
        arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:MergeWith="$(Build.SourcesDirectory)/Coverage/coverage.json" /p:CoverletOutputFormat="cobertura" /p:CoverletOutput="$(Build.SourcesDirectory)/Coverage/" -m:1'
      condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

    - task: PublishCodeCoverageResults@1
      displayName: 'collect code coverage'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: $(Build.SourcesDirectory)\Coverage\coverage.cobertura.xml
        failIfCoverageEmpty: false
      condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

    - task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@8
      displayName: 'check build quality'
      inputs:
        checkCoverage: true
        coverageFailOption: fixed
        coverageType: lines
        coverageThreshold: 10
        coverageVariance: 0
        allowCoverageVariance: false
      condition: and(succeeded(), eq(variables['BuildConfiguration'], 'debug'))

    - task: CopyFiles@2
      displayName: 'copy arm templates'
      inputs:
        SourceFolder: Infrastructure
        TargetFolder: '$(build.artifactstagingdirectory)/Infrastructure'

    - task: CopyFiles@2
      displayName: 'copy release management scripts'
      inputs:
        SourceFolder: Scripts
        TargetFolder: '$(build.artifactstagingdirectory)/Scripts'

    - task: PublishBuildArtifacts@1
      displayName: 'publish artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(Build.BuildNumber)_$(BuildConfiguration)'

- stage: Build_WebAPI
  dependsOn: Build_Common
  jobs:
  - job: Build_WebAPI
    strategy:
      maxParallel: 2
      matrix:
        debug:
          BuildConfiguration: debug
        release:
          BuildConfiguration: release

    steps:

    - ${{ if ne(parameters.repoToCheckout, '') }}:
      - checkout: ${{ parameters.repoToCheckout }}
        path: ${{ parameters.checkoutPath }}

    - task: CopyFiles@2
      displayName: 'Copy global.json file'
      inputs:
        SourceFolder:  Service/GroupMembershipManagement/
        Contents: 'global.json'
        TargetFolder: 'Service\GroupMembershipManagement\Hosts\WebApi\'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true
        workingDirectory: 'Service\GroupMembershipManagement\Hosts\WebApi\'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build webapi'
      retryCountOnTaskFailure: 3
      inputs:
        command: build
        projects: 'Service/GroupMembershipManagement/Hosts/WebApi/WebApi/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish webapi package'
      inputs:
        command: publish
        arguments: '--configuration $(BuildConfiguration) --output webapi'
        projects: 'Service/GroupMembershipManagement/Hosts/WebApi/WebApi/*.csproj'
        publishWebProjects: true
        modifyOutputPath: false
        zipAfterPublish: false

    - powershell: |
          pwd
          ls
          cd\
          cd $(System.DefaultWorkingDirectory)/webapi
          ls
          Get-ChildItem -Recurse

    - task: ArchiveFiles@2
      displayName: 'archive webapi function'
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)/webapi"
        includeRootFolder: false
        archiveFile: "$(System.DefaultWorkingDirectory)/webapi/webapi.zip"

    - task: CopyFiles@2
      displayName: 'copy webapi function package'
      inputs:
        SourceFolder: $(System.DefaultWorkingDirectory)/webapi
        Contents: webapi.zip
        TargetFolder: '$(build.artifactstagingdirectory)/webapi_package/'

    - task: CopyFiles@2
      displayName: 'copy webapi arm templates'
      inputs:
        SourceFolder: Service/GroupMembershipManagement/webapi
        Contents: '**\Infrastructure\**'
        TargetFolder: '$(build.artifactstagingdirectory)/webapi_arm_templates'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish webapi artifacts'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: '$(Build.BuildNumber)_$(BuildConfiguration)'