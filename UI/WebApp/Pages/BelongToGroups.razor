@* 
Copyright (c) Microsoft Corporation.
Licensed under the MIT license. 
*@

@page "/belongtogroups"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text.Json
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@attribute [Authorize]

<PageTitle>Groups I'm In</PageTitle>

<h1>Groups I am a member of</h1>
<br />

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Summary </h3>
    <table class="table">
        <FluentDataGridRow TItem="string" RowType="DataGridRowType.StickyHeader" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.ColumnHeader">Property</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.ColumnHeader">Value</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">Total Num Groups</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@numGroups</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">User query input value</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@nameFilter</FluentDataGridCell>
        </FluentDataGridRow>
        <FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">Filter query (i.e. string passed to request as filter params)</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@filterQuery</FluentDataGridCell>
        </FluentDataGridRow>
        @*<FluentDataGridRow TItem="string" style="grid-template-columns: 50% 50%;">
            <FluentDataGridCell GridColumn="1">Num Groups after Filter</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">@filteredNumGroups</FluentDataGridCell>
        </FluentDataGridRow>*@
    </table>
    <br />


    <h3>Groups</h3>

    <div class="search">
        @*<input type="search" @bind="nameFilter" @bind:event="oninput" placeholder="Group display name..." class="search-box"/>*@
        <input type="search" @bind="@nameFilter" @oninput="@onInput" placeholder="Group display name..." class="search-box"/>
    </div>

    <table class="table">
        <FluentDataGridRow TItem="string" RowType="DataGridRowType.StickyHeader" style="grid-template-columns: 40% 30% 30%;">
            <FluentDataGridCell GridColumn="1" CellType="DataGridCellType.ColumnHeader">ID</FluentDataGridCell>
            <FluentDataGridCell GridColumn="2" CellType="DataGridCellType.ColumnHeader">Display Name</FluentDataGridCell>
            <FluentDataGridCell GridColumn="3" CellType="DataGridCellType.ColumnHeader">Group Type</FluentDataGridCell>
        </FluentDataGridRow>
        <Virtualize Context="group" ItemsProvider="@LoadGroups" @ref="@virtualizedTable">
            <FluentDataGridRow TItem="Group" style="grid-template-columns: 40% 30% 30%;">
                <FluentDataGridCell GridColumn="1"><a href=@getGroupUrl(group) target="_blank">@group.Id</a></FluentDataGridCell>
                <FluentDataGridCell GridColumn="2">@getDisplayName(group)</FluentDataGridCell>
                <FluentDataGridCell GridColumn="3">@getGroupType(group)</FluentDataGridCell>
            </FluentDataGridRow>
        </Virtualize>
    </table>
}

@code {
    User? user;
    List<string>? groups = new List<string>();
    List<Group> groupProps = new List<Group>();
    int numGroups;
    Virtualize<Group> virtualizedTable;
    //int filteredNumGroups;

    IUserTransitiveMemberOfCollectionWithReferencesPage? groupsResult = null;

    string nameFilter = string.Empty;
    string filterQuery => "startsWith(displayName,'" + nameFilter + "')";
    //string nameFilter = string.Empty;
    //IQueryable<Group>? filteredItems => groupProps.AsQueryable()?.Where(x => x.DisplayName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));


    public EventCallback<ChangeEventArgs> OnInput;

    // input callback method
    public async Task onInput(ChangeEventArgs changeEvent)
    {
        string inputValue = (string)changeEvent.Value;
        string message = "Hit event callback ";
        Console.WriteLine(message);
        nameFilter = inputValue;
        Console.WriteLine("inputValue inside event callback: " + inputValue);
        Console.WriteLine("nameFilter inside event callback: " + nameFilter);

        //await LoadGroups(new ItemsProviderRequest(0, numGroups, new CancellationToken(false)));

        groupProps = new List<Group>();
        StateHasChanged();
        await virtualizedTable.RefreshDataAsync();
    }


    private static string getGroupUrl(DirectoryObject group)
    {
        return "https://portal.azure.com/#view/Microsoft_AAD_IAM/GroupDetailsMenuBlade/~/Overview/groupId/" + group.Id;
    }

    private static string getDisplayName(DirectoryObject obj)
    {
        Group group = (Group)obj;
        return group.DisplayName;
    }

    private static string getGroupType(DirectoryObject obj)
    {
        var group = (Group)obj;

        if (group.GroupTypes != null && group.GroupTypes.Contains("Unified"))
        {
            return "M365";
        } 
        else if (group.MailEnabled == null || group.MailEnabled == false)
        {
            return "Security Group";
        }
        else if (group.SecurityEnabled == null || group.SecurityEnabled == false)
        {
            return "Distribution Group";
        }
        else
        {
            return "Invalid group type";
        }
    }

    private List<Group> HandleGroupsAsDirectoryObjects(IEnumerable<DirectoryObject> groupsResponse)
    {
        var groupProperties = new List<Group>();
        var allGroups = (List<DirectoryObject>)groupsResponse;
        foreach(var item in allGroups)
        {
            if (item.ODataType == "#microsoft.graph.group")
            {
                var group = (Group)item;
                groupProperties.Add(group);
            }
        }
        return groupProperties;
    }

    //private async Task<IQueryable<Group>> GetGroupsAsync(int startIndex, int numToRetrieve)
    private async Task<List<Group>> GetGroupsAsync(int startIndex, int numToRetrieve)
    {
        var cachedMembers = groupProps.Count;

        //if (groupsResult == null)
        if (cachedMembers == 0) // TODO: remove outer if, IF this works
        {
            var queryOptions = new List<QueryOption>()
            {
	            new QueryOption("$count", "true"),
                //new QueryOption("$search", nameFilter)
            };

            if (nameFilter == string.Empty)
            {
                groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
                        .Request( queryOptions )
                        .Header("ConsistencyLevel","eventual")
                        .Select("displayName,id,groupTypes")
                        .OrderBy("displayName")
                        .GetAsync();
            }
            else
            {
                groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
                        .Request( queryOptions )
                        .Header("ConsistencyLevel","eventual")
                        .Filter(filterQuery)
                        //.Search("displayName:" + nameFilter)
                        .Select("displayName,id,groupTypes")
                        .OrderBy("displayName")
                        .GetAsync();
            }


            groupProps = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);
            Console.WriteLine("nameFilter: " + nameFilter);
            Console.WriteLine("newly found groups: " + groupProps.Count);

            if (groupsResult.AdditionalData["@odata.count"] != null)
            {
                var elem = (JsonElement)groupsResult.AdditionalData["@odata.count"];
                int totalNumGroups;
                elem.TryGetInt32(out totalNumGroups);
                numGroups = totalNumGroups;
                StateHasChanged();
            }
        }

        // TODO: double check logic here for this while loop for virtualization!
        while ((startIndex + numToRetrieve >= cachedMembers) && (groupsResult.NextPageRequest != null) && (cachedMembers <= numGroups))
        {
            Console.WriteLine("numToRetrieve: " + numToRetrieve);
            Console.WriteLine("filler");
            groupsResult = await groupsResult.NextPageRequest.GetAsync();
            var newGroups = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);
            groupProps.AddRange(newGroups);
            cachedMembers = groupProps.Count;
        }

        return groupProps.GetRange(startIndex, Math.Min(numToRetrieve, (numGroups - startIndex)));
        //return groupProps.GetRange(startIndex, Math.Min(numToRetrieve, (numGroups - startIndex))).AsQueryable();
    }



    private async ValueTask<ItemsProviderResult<Group>> LoadGroups(ItemsProviderRequest request)
    {
        //groupsResult = null;
        //groupProps = new List<Group>();

        var loadedGroups = await GetGroupsAsync(request.StartIndex, request.Count);
        //var filteredGroups = groups.Where(x => x.DisplayName.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
     
        //filteredNumGroups = filteredGroups.Count<Group>();
        //StateHasChanged();

        //return new ItemsProviderResult<Group>(filteredGroups.ToList<Group>(), numGroups);
        return new ItemsProviderResult<Group>(loadedGroups, numGroups);

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();

             OnInput = EventCallback.Factory.Create<ChangeEventArgs>(this, onInput);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
