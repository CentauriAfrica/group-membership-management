@* 
Copyright (c) Microsoft Corporation.
Licensed under the MIT license. 
*@

@page "/belongtogroupsold"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Graph
@using Microsoft.AspNetCore.Components.QuickGrid
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@attribute [Authorize]

<PageTitle>Groups I'm In</PageTitle>

<h1>Groups I am a member of</h1>
<br />

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Summary </h3>

    <table class="table">
        <thead>
            <tr>
                <th>Property</th>
                <th>Value</th>
            </tr>
        </thead>
        <tr>
            <td> Num Groups </td>
            <td> @numGroups </td>
        </tr>
    </table>
    <br />

    @*<h3>Groups</h3>

    <table class="table">
        <thead>
            <tr>
                <th>Group ID</th>
                <th>Display Name</th>
                <th>Group Type</th>
            </tr>
        </thead>
        <Virtualize Context="group" ItemsProvider="@LoadGroups">
            <tr>
               <td> <a href=@getGroupUrl(group) target="_blank"> @group.Id </a></td>
               <td> @getDisplayName(group) </td>
               <td> @getGroupType(group) </td>
           </tr>
        </Virtualize>
    </table>
    <br />*@

    <h3> Virtualized QuickGrid</h3>

    <div class="grid" tabindex="-1">
        <QuickGrid ItemsProvider="@itemsProvider" Virtualize="true">
            <PropertyColumn Title="ID" Property="@(group => group.Id)" />
            @*<PropertyColumn Title="Display Name" Property="@(group => getDisplayName(group))" />
            <PropertyColumn Title="Group Type" Property="@(group => getGroupType(group))" />*@
        </QuickGrid>
    </div>
}

@code {
    User? user;
    List<string>? groups = new List<string>();
    //List<Group>? groupProperties = new List<Group>();
    List<Group> groupProps = new List<Group>();
    int numGroups = 0;

    IUserTransitiveMemberOfCollectionWithReferencesPage groupsResult = null;
    GridItemsProvider<Group> itemsProvider;


    private string getGroupUrl(DirectoryObject group)
    {
        return "https://portal.azure.com/#view/Microsoft_AAD_IAM/GroupDetailsMenuBlade/~/Overview/groupId/" + group.Id;
    }

    private string getDisplayName(DirectoryObject obj)
    {
        Group group = (Group)obj;
        return group.DisplayName;
    }

    private string getGroupType(DirectoryObject obj)
    {
        var group = (Group)obj;

        if (group.GroupTypes != null && group.GroupTypes.Contains("Unified"))
        {
            return "M365";
        } 
        else if (group.MailEnabled == null || group.MailEnabled == false)
        {
            return "Security Group";
        }
        else if (group.SecurityEnabled == null || group.SecurityEnabled == false)
        {
            return "Distribution Group";
        }
        else
        {
            return "Invalid group type";
        }
    }

    //private void HandleGroupsAsDirectoryObjects(IEnumerable<DirectoryObject> groupsResponse)
    //{
    //    var groups = (List<DirectoryObject>)groupsResponse;
    //    foreach(var item in groups)
    //    {
    //        if (item.ODataType == "#microsoft.graph.group")
    //        {
    //            var group = (Group)item;
    //            groupProperties.Add(group);
    //        }
    //    }
    //    numGroups = groupProperties.Count;
    //}

    private List<Group> HandleGroupsAsDirectoryObjects(IEnumerable<DirectoryObject> groupsResponse)
    {
        var groupProperties = new List<Group>();
        var groups = (List<DirectoryObject>)groupsResponse;
        foreach(var item in groups)
        {
            if (item.ODataType == "#microsoft.graph.group")
            {
                var group = (Group)item;
                groupProperties.Add(group);
            }
        }
        //numGroups = groupProperties.Count;
        return groupProperties;
    }

    private async ValueTask<GridItemsProviderResult<Group>> LoadGroups(GridItemsProviderRequest<Group> request)
    {
        var queryOptions = new List<QueryOption>()
        {
	        new QueryOption("$count", "true")
        };

        var cachedMembers = groupProps.Count;


        if (groupsResult == null)
        {
            groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
                        .Request( queryOptions )
                        .Header("ConsistencyLevel","eventual")
                        .Select("displayName,id,groupTypes")
                        .OrderBy("displayName")
                        .GetAsync();

            groupProps = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);

        } 
        else
        {
            if ((request.StartIndex >= cachedMembers) && (groupsResult.NextPageRequest != null))
            {
                groupsResult = await groupsResult.NextPageRequest.GetAsync();
                groupProps.AddRange(HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage));
                cachedMembers = groupProps.Count;
            }
        }


        return new GridItemsProviderResult<Group>(groupProps, 271);


        //if (groupsResult.AdditionalData["@odata.count"] != null)
        //{
        //    numGroups = groupsResult.AdditionalData["@odata.count"];
        //}

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();

            itemsProvider = async request =>
            {
                var queryOptions = new List<QueryOption>()
                    {
                    new QueryOption("$count", "true")
                    };

                var cachedMembers = groupProps.Count;


                if (groupsResult == null)
                {
                    groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
                                .Request(queryOptions)
                                .Header("ConsistencyLevel", "eventual")
                                .Select("displayName,id,groupTypes")
                                .OrderBy("displayName")
                                .GetAsync();

                    groupProps = HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);

                }
                else
                {
                    if ((request.StartIndex >= cachedMembers) && (groupsResult.NextPageRequest != null))
                    {
                        groupsResult = await groupsResult.NextPageRequest.GetAsync();
                        groupProps.AddRange(HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage));
                        cachedMembers = groupProps.Count;
                    }
                }

                return GridItemsProviderResult.From(
                    items: groupProps,
                    totalItemCount:: 271
                );

                //return new GridItemsProviderResult<Group>(groupProps, 271);
            };

            //var queryOptions = new List<QueryOption>()
            //{
	           // new QueryOption("$count", "true")
            //};

            //var groupsResult = await GraphServiceClient.Me.TransitiveMemberOf
            //            .Request( queryOptions )
            //            .Header("ConsistencyLevel","eventual")
            //            .Select("displayName,id,groupTypes")
            //            .OrderBy("displayName")
            //            .GetAsync();

            //HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);
            //while(groupsResult.NextPageRequest != null)
            //{
            //    groupsResult = await groupsResult.NextPageRequest.GetAsync();
            //    HandleGroupsAsDirectoryObjects(groupsResult.CurrentPage);
            //}
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
